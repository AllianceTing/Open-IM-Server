# OpenIM config


#---------------Infrastructure configuration---------------------#
zookeeper:
  schema: openim                          #默认即可
  address: [ 127.0.0.1:2181 ]             #
  username:
  password:

mysql:
  address: [ 127.0.0.1:13306 ]            #mysql地址 目前仅支持单机，默认即可
  username: root                          #mysql用户名，建议修改
  password: openIM123                     # mysql密码，建议修改
  database: openIM_v2                     #默认即可
  maxOpenConn: 100                        #
  maxIdleConn: 10                         #
  maxLifeTime: 5                          #
  logLevel: 4                             # 1=slient 2=error 3=warn 4=info
  slowThreshold: 500                      # 毫秒

mongo:
  uri:                                    #不为空则直接使用该值
  address: [ 127.0.0.1:37017 ]            #单机时为mongo地址，使用分片集群时，为mongos地址 默认即可
  timeout: 60
  database: openIM                        #mongo db 默认即可
  source: admin
  username: root                          #mongo用户名，建议先不设置
  password: openIM123                     #mongo密码，建议先不设置
  maxPoolSize: 100
  retainChatRecords: 3650                 #mongo保存离线消息时间（天），根据需求修改
  chatRecordsClearTime: "0 2 * * 3"       #每周三凌晨2点清除mongo中的过期消息，该配置和linux定时任务一样

redis:
  address: [ 127.0.0.1:16379 ]            #redis地址 单机时，填写一个地址即可，使用redis集群时候，填写集群中多个节点地址（主从地址都可以填写，增加容灾能力），默认即可
  username:                               #only redis version 6.0+ need username
  password: openIM123                     #redis密码 建议修改

kafka:
  username:
  password:
  addr: [ 127.0.0.1:9092 ]                #kafka配置，默认即可
  latestMsgToRedis:
    topic: "latestMsgToRedis"             #
  offlineMsgToMongo:
    topic: "offlineMsgToMongoMysql"       #用于mongo和mysql保存消息
  msgToPush:
    topic: "msqToPush"                    #消息push
  msgToModify:
    topic: "msgToModify"                  #消息push
  consumerGroupID:
    msgToRedis: redis
    msgToMongo: mongo
    msgToMySql: mysql
    msgToPush: push
    msgToModify: modify


#---------------Internal service configuration---------------------#




rpc:
  registerIP:                             #作为rpc启动时，注册到zookeeper的IP，api/gateway能访问到此ip和对应的rpcPort中的端口
  listenIP:                               #如不设置则为 0.0.0.0


api:
  openImApiPort: [ 10002 ]                #api服务端口
  listenIP:

object:
  enable: minio
  apiURL: http://127.0.0.1:10002/third/object
  minio:
    tempBucket: "openim"
    dataBucket: "openim"
    location: us-east-1
    endpoint: http://127.0.0.1:10005      #minio外网ip 这个ip是给客户端访问的
    accessKeyID: root
    secretAccessKey: openIM123
    isDistributedMod: false               #是否分布式多硬盘部署 默认docker-compose中为false，如果是多硬盘部署，需要修改为true
  tencent:
    appID:
    region:
    bucket:
    secretID:
    secretKey:
  ali: # ali oss
    regionID:
    accessKeyID:
    accessKeySecret:
    stsEndpoint:
    ossEndpoint:
    bucket:
    finalHost:
    stsDurationSeconds:
    OssRoleArn:
  aws:
    accessKeyID:                              #AssumeRole用户关联的accessKeyID
    accessKeySecret:                          #AssumeRole用户关联的accessKeySecrect
    region:                                   #分区
    bucket:                                   #桶
    finalHost:                                #对外Host
    roleArn:                                  #RoleArn
    externalId:                               #角色扩展Id
    roleSessionName:                          #角色SESSION名称

rpcPort: #rpc服务端口 默认即可
  openImUserPort: [ 10110 ]
  openImFriendPort: [ 10120 ]
  openImMessagePort: [ 10130 ]
  openImMessageGatewayPort: [ 10140 ]
  openImGroupPort: [ 10150 ]
  openImAuthPort: [ 10160 ]
  openImPushPort: [ 10170 ]
  openImConversationPort: [ 10180 ]
  openImThirdPort: [ 10190 ]

rpcRegisterName: #rpc注册服务名，默认即可
  openImUserName: User
  openImFriendName: Friend
  openImMsgName: Msg
  openImPushName: Push
  openImMessageGatewayName: MessageGateway
  openImGroupName: Group
  openImAuthName: Auth
  openImConversationName: Conversation
  openImRtcName: Rtc
  openImThirdName: Third

log:
  storageLocation: ../logs/
  rotationTime: 24
  remainRotationCount: 2                  #日志数量
  remainLogLevel: 6                       #日志级别 6表示全都打印，测试阶段建议设置为6
  isStdout: false
  isJson: false
  withStack: false


longConnSvr:
  openImWsPort: [ 10001 ]                 #ws服务端口，默认即可，要开放此端口或做nginx转发
  websocketMaxConnNum: 10000
  websocketMaxMsgLen: 4096
  websocketTimeOut: 10

push:
  enable: getui
  geTui: #个推推送
    pushUrl: "https://restapi.getui.com/v2/$appId"
    masterSecret: ""
    appKey: ""
    intent: ""
    channelID: ""
    channelName: ""
  fcm: #firebase cloud message 消息推送
    serviceAccount: "openim-5c6c0-firebase-adminsdk-ppwol-8765884a78.json" #帐号文件，此处需要改修配置，并且这个文件放在 config目录下
  jpns: #极光推送 在极光后台申请后，修改以下四项，必须修改
    appKey:
    masterSecret:
    pushUrl:
    pushIntent:
    enable: false
    
manager:
  #app管理员userID和nickename，  用于管理后台登录
  userID: [ "openIM123456","openIM654321","openIMAdmin" ]
  nickname: [ "system1","system2", "system3" ]



# 多端互踢策略
# 1：多平台登录：Android、iOS、Windows、Mac 每种平台只能一个在线，web端可以多个同时在线
multiLoginPolicy: 1

#msg log insert to db
chatPersistenceMysql: true
#消息缓存时间
msgCacheTimeout: 86400
#群聊已读开启
groupMessageHasReadReceiptEnable: true
#单聊已读开启
singleMessageHasReadReceiptEnable: true

#token config
tokenPolicy:
  accessSecret: openIM123 #token生成相关，默认即可
  # Token effective time day as a unit
  accessExpire: 90  #token过期时间（天） 默认即可

messageVerify:
  friendVerify: false

#ios系统推送声音以及标记计数
iosPush:
  pushSound: "xxx"
  badgeCount: true
  production: false

callback:
  # callback url 需要自行更换callback url
  url:
  beforeSendSingleMsg:
    enable: false # 回调是否启用
    timeout: 5 #callback超时时间（秒）
    failedContinue: true #如果callback失败是否继续
  afterSendSingleMsg:
    enable: false
    timeout: 5
  beforeSendGroupMsg:
    enable: false
    timeout: 5
    failedContinue: true
  afterSendGroupMsg:
    enable: false
    timeout: 5
  msgModify:
    enable: false
    timeout: 5
    failedContinue: true
  userOnline:
    enable: false
    timeout: 5
  userOffline:
    enable: false
    timeout: 5
  userKickOff:
    enable: false
    timeout: 5
  offlinePush:
    enable: false
    timeout: 5
    failedContinue: true
  onlinePush:
    enable: false
    timeout: 5
    failedContinue: true
  superGroupOnlinePush:
    enable: false
    timeout: 5
    failedContinue: true
  beforeAddFriend:
    enable: false
    timeout: 5
    failedContinue: true
  beforeCreateGroup:
    enable: false
    timeout: 5
    failedContinue: true
  beforeMemberJoinGroup:
    enable: false
    timeout: 5
    failedContinue: true
  beforeSetGroupMemberInfo:
    enable: false
    timeout: 5
    failedContinue: true
  setMessageReactionExtensions:
    enable: false
    timeout: 5
    failedContinue: true

# prometheus每个服务监听的端口数量需要和rpc port保持一致
prometheus:
  enable: false
  userPrometheusPort: [ 20110 ]
  friendPrometheusPort: [ 20120 ]
  messagePrometheusPort: [ 20130 ]
  messageGatewayPrometheusPort: [ 20140 ]
  groupPrometheusPort: [ 20150 ]
  authPrometheusPort: [ 20160 ]
  pushPrometheusPort: [ 20170 ]
  conversationPrometheusPort: [ 20230 ]
  rtcPrometheusPort: [ 21300 ]
  thirdPrometheusPort: [ 21301 ]
  messageTransferPrometheusPort: [ 21400, 21401, 21402, 21403 ] # 端口数量和 script/path_info.cfg  msg_transfer_service_num保持一致

